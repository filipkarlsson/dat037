Time complexity for contains() in BinSearchIntSet is: 5*log2(n)+6 = O(log(n))

It can be seen below that the binary search used in both BinarySearchIntSet and BinSearchGenSetAsIntSet give execution
times that is similar to log2(the nuber of operations).

  BinarySearchIntSet
set size  execution time (nanoseconds)
      10             7.3
     100            13.7
    1000            42.6
   10000            49.5
  100000            59.2

  LinSearchIntSet
set size  execution time (nanoseconds)
      10             9.8
     100            67.0
    1000           524.5
   10000          5987.2
  100000         51850.2
 1000000        795848.6
10000000       8713725.5


java Benchmark BinSearchGenSetAsIntSet
set size  execution time (nanoseconds)
      10            15.6
     100            23.3
    1000            65.1
   10000            69.5
  100000            76.3
 1000000            93.4
10000000           136.4



The complexity of the method "contains()" was calculated in the comments as follows:

    public boolean contains(int element){
        return binarySearch(element,set) != -1;      // 1 + 1 for return and comparison
    }


    private int binarySearch(int element, int[] array){
        int middle = nrOfElements/2;            // + 1
        int max = nrOfElements;                 // + 1
        int min = 0;                            // + 1

        // Find out in witch half of "array" "element" is, or would be in.
                                                    // loop start
        while( min != max ){                        // + 1
            if (element == array[middle]) {         // + 1
                return middle;
            } else if (element > array[middle]) {   // + 1
                min = middle + 1;
            } else {
                max = middle;                       // + 1
            }
            middle = (min+max)/2;                   // + 1
        }                                           // loop end
        return -1;                  // + 1
    }

As the loop part of the method binarySearch divides the search-area by half in each loop, the total number of loops
will be at most log2(n) where n is the size of the original search-area. As there are 5 operations in the loop and 6
operations outside of the loop, the total number of operations, and also a measure of how long time it will take to run
the method assuming that all operations take the same ammount of time, sums up to 5*log2(n)+6.

The logarithmic relation between number of loops (k) and size of data being searched through (n) is found by the
following calculations:
2^k = n => k = log2(n)